#This file was originally generated by PyScripter's unitest wizard

import unittest
import GameOfLife
import sys

class WritableObject:
    def __init__(self):
        self.content = []
    def write(self, string):
        self.content.append(string)

foo = WritableObject()
sys.stdout = foo

class TestSeed(unittest.TestCase):

    def setUp(self):
        # [[ 0,0 0,1 0,2  0,3 ] [1,0 1,1 1,2 1,3] .....]
        self.baseList = [['-', '-', '-', '-'],['-', '*', '*', '-'],\
                        ['-', '*', '*', '-'],['-', '-', '-', '-']]
        self.newList = self.baseList
        self.objseed = GameOfLife.Seed(self.baseList,self.newList,2,2)

        self.baseList1 = [['-', '-', '-', '-', '-'],['-', '-', '*', '-', '-']\
            ,['-', '-', '*', '-', '-'],['-', '-', '*', '-', '-'],\
            ['-', '-', '-', '-', '-']]
        self.newList1 = self.baseList1
        self.objseed1 = GameOfLife.Seed(self.baseList1,self.newList1,3,3)

    def tearDown(self):
        del self.objseed
        del self.objseed1

    def testprintNewList_blockpattern(self):
        self.objseed.printNewList()
        expectedoutput = ['The ouptut is below', '\n', "['-', '-', '-', '-']", '\n', "['-', '*', '*', '-']", '\n', "['-', '*', '*', '-']", '\n', "['-', '-', '-', '-']", '\n']
        self.assertEqual(foo.content,expectedoutput)

    def testifDead_negative(self):
        self.assertEqual(self.objseed.ifDead(1,1),None)

    def testifDead_negative(self):
        self.assertEqual(self.objseed.ifDead(1,0),'-')

    def testifDead_positive(self):
        self.assertEqual(self.objseed1.ifDead(2,1),'*')

    def testifAlive_positive(self):
        self.assertEqual(self.objseed.ifAlive(1,1),'*')

    def testifAlive_negative_hypen(self):
        self.assertEqual(self.objseed.ifAlive(0,0),None)

    def testifAlive_negative_neighbour(self):
        self.assertEqual(self.objseed1.ifAlive(1,2),'-')

    def testliveNeighbours_hypen(self):
        self.assertEqual(self.objseed.liveNeighbours(0,1),2)

    def testliveNeighbours_astrix(self):
        self.assertEqual(self.objseed.liveNeighbours(1,1),3)

if __name__ == '__main__':
    unittest.main()
